def move(command):
    matrix[rover_position[0]][rover_position[1]] = '-'

    r = rover_position[0] + directions[command][0]
    c = rover_position[1] + directions[command][1]

    return [r,c]


def change_coordinates(position, size):
    for i in range(2):
        if position[i] < 0:
            position[i] = size - 1
        elif position[i] >= size:
            position[i] = 0
    return position


def check_deposit_or_rock(current_matrix, rover, current_deposits):
    position = current_matrix[rover[0]][rover[1]]
    if position in ['W', 'M', 'C']:
        print(f"{current_deposits[position][0]} deposit found at ({rover[0]}, {rover[1]})")
        current_deposits[position][1] += 1
    elif position == 'R':
        return 'broken'
    return current_deposits


MATRIX_DIMENSIONS = 6
matrix = []
deposits = {'W': ['Water', 0], 'M': ['Metal', 0], 'C': ['Concrete', 0]}
rover_position = []
is_broken = False

directions = {
    'up': (-1, 0),
    'down': (1, 0),
    'left': (0, -1),
    'right': (0, 1),
}
for row in range(MATRIX_DIMENSIONS):
    matrix.append(input().split())

    if 'E' in matrix[row]:
        rover_position = [row,matrix[row].index('E')]

commands = [n for n in input().split(', ')]
for command in commands:

    rover_position = move(command)

    if not (0 <= rover_position[0]< MATRIX_DIMENSIONS and 0 <= rover_position[1] < MATRIX_DIMENSIONS):
        rover_position = change_coordinates(rover_position, MATRIX_DIMENSIONS)

    result_after_checking_the_land = check_deposit_or_rock(matrix, rover_position, deposits)
    if result_after_checking_the_land == 'broken':
        is_broken = True
        break
    deposits = result_after_checking_the_land

if is_broken:
    print(f"Rover got broken at ({rover_position[0]}, {rover_position[1]})")
    
if deposits['W'][1] >= 1 and deposits['M'][1] >= 1 and deposits['C'][1] >= 1:
    print("Area suitable to start the colony.")
else:
    print("Area not suitable to start the colony.")
